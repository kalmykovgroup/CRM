// <auto-generated />
using System;
using KTSF.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KTSF.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("KTSF.Core.ABAC.ASetOfRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("a_set_of_rules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Старший кассир"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Менеджер по закупкам"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Кассир"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Установленные дополнительные права доступа на изменение цены для товаров",
                            Name = "Кассир Евгений"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Бухгалтер"
                        });
                });

            modelBuilder.Entity("KTSF.Core.ABAC.ComponentAccessAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ASetOfRulesId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ASetOfRulesId");

                    b.ToTable("component_access_attributes");
                });

            modelBuilder.Entity("KTSF.Core.ABAC.DataBaseAccessAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ASetOfRulesId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdminsConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("RangeFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RangeTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ASetOfRulesId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("database_access_attributes");
                });

            modelBuilder.Entity("KTSF.Core.ABAC.EmployeeAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AdminsСonsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Agent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OldData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_actions");
                });

            modelBuilder.Entity("KTSF.Core.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Менеджер по закупкам"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Старший кассир"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Кассир"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Бугалтер"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Охранник"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "Уборщик"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name = "Водитель"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Name = "Грущик"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            Name = "Слесарь"
                        });
                });

            modelBuilder.Entity("KTSF.Core.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "My company name",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("KTSF.Core.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ASetOfRulesId")
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ApplyingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LayoffDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("PassportSeries")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Snils")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tin")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ASetOfRulesId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("EmployeeStatusId");

                    b.HasIndex("ObjectId");

                    b.ToTable("employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ASetOfRulesId = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEifQ.GQm1j57RyZMHdwsolLnzhoB9A49mC0KusQBpHS9_-kQ",
                            Address = "Красная площадь 4",
                            ApplyingDate = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8929),
                            AppointmentId = 1,
                            Created_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8947),
                            Email = "admin@mail.ru",
                            EmployeeStatusId = 3,
                            Name = "Иван",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Алексеевич",
                            Phone = "+79260128187",
                            Snils = "123456789012",
                            Surname = "Калмыков",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8948)
                        },
                        new
                        {
                            Id = 2,
                            ASetOfRulesId = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjIifQ.cbpuaPB0oVEkmkgFvfQUcaRb58xRn5zlClDroWd75JA",
                            Address = "Арбатская 6",
                            ApplyingDate = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8952),
                            AppointmentId = 2,
                            Created_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8952),
                            Email = "admin2@mail.ru",
                            EmployeeStatusId = 3,
                            Name = "Артур",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Игоревич",
                            Phone = "+79260125434",
                            Snils = "123456789012",
                            Surname = "Соколов",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8953)
                        },
                        new
                        {
                            Id = 3,
                            ASetOfRulesId = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjMifQ.n0AxopvGMqJUdvyuXVuBZOurMD2Tiah-EqFi-a-lR6E",
                            Address = "Шевченко 4",
                            ApplyingDate = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8955),
                            AppointmentId = 6,
                            Created_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8956),
                            Email = "admin3@mail.ru",
                            EmployeeStatusId = 3,
                            Name = "Александр",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Владимирович",
                            Phone = "+79267654356",
                            Snils = "123456789012",
                            Surname = "Трунин",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8956)
                        },
                        new
                        {
                            Id = 4,
                            ASetOfRulesId = 4,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjQifQ.NiQnkH09RTP1QMiS9rbWLQ3iDJbZ2CV3RsBflk5QjXs",
                            Address = "Ново Павловка 16/3",
                            ApplyingDate = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8958),
                            AppointmentId = 3,
                            Created_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8958),
                            Email = "admin4@mail.ru",
                            EmployeeStatusId = 3,
                            Name = "Алексей",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Александрович",
                            Phone = "+79266455553",
                            Snils = "123456789012",
                            Surname = "Федосов",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8959)
                        },
                        new
                        {
                            Id = 5,
                            ASetOfRulesId = 5,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjUifQ.t9QlQfK-k6WS2yA2KlKgn0JRCQhDaz5Ujo8UBVTJWCM",
                            Address = "Дальний восток 13/3",
                            ApplyingDate = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8961),
                            AppointmentId = 4,
                            Created_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8961),
                            Email = "admin5@mail.ru",
                            EmployeeStatusId = 2,
                            Name = "Ансар",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Нуруллович",
                            Phone = "+79266726545",
                            Snils = "123456789012",
                            Surname = "Агадуллин",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8962)
                        },
                        new
                        {
                            Id = 6,
                            ASetOfRulesId = 4,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjUifQ.t9QlQfK-k6WS2yA2KlKgn0JRCQhDaz5Ujo8UBVTJWCM",
                            Address = "Hell street 66/6",
                            ApplyingDate = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8964),
                            AppointmentId = 5,
                            Created_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8964),
                            Email = "merlin@mail.ru",
                            EmployeeStatusId = 4,
                            Name = "Мерлин",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Витальевич",
                            Phone = "+79266726545",
                            Snils = "123456789012",
                            Surname = "Мэнсон",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8964)
                        },
                        new
                        {
                            Id = 7,
                            ASetOfRulesId = 4,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjUifQ.t9QlQfK-k6WS2yA2KlKgn0JRCQhDaz5Ujo8UBVTJWCM",
                            Address = "Hell street 66/6",
                            ApplyingDate = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8966),
                            AppointmentId = 6,
                            Created_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8967),
                            Email = "prohor@mail.ru",
                            EmployeeStatusId = 1,
                            Name = "Прохор",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Иванович",
                            Phone = "+79266726545",
                            Snils = "123456789012",
                            Surname = "Шаляпин",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(8967)
                        });
                });

            modelBuilder.Entity("KTSF.Core.EmployeeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("employee_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Не трудоустроен"
                        },
                        new
                        {
                            Id = 2,
                            Name = "На испытательном сроке"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Трудоустроен"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Уволен"
                        });
                });

            modelBuilder.Entity("KTSF.Core.Object", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("objects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ул. Новый Арбат, 15",
                            CompanyId = 1,
                            Name = "Продуктовый на Арбате"
                        });
                });

            modelBuilder.Entity("KTSF.Core.PackingList_.PackingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("packing_lists");
                });

            modelBuilder.Entity("KTSF.Core.PackingList_.PackingListToProductJoinTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("PackingListId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackingListId");

                    b.HasIndex("ProductId", "PackingListId")
                        .IsUnique();

                    b.ToTable("packing_list_to_product_joint_tables");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Article", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("ProductId");

                    b.ToTable("articles");

                    b.HasData(
                        new
                        {
                            Name = "article_1",
                            Id = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Name = "article_2",
                            Id = 2,
                            ProductId = 2
                        },
                        new
                        {
                            Name = "article_2.1",
                            Id = 3,
                            ProductId = 2
                        },
                        new
                        {
                            Name = "article_3",
                            Id = 4,
                            ProductId = 3
                        },
                        new
                        {
                            Name = "article_4",
                            Id = 5,
                            ProductId = 4
                        },
                        new
                        {
                            Name = "article_4.1",
                            Id = 6,
                            ProductId = 4
                        },
                        new
                        {
                            Name = "article_4.2",
                            Id = 7,
                            ProductId = 4
                        },
                        new
                        {
                            Name = "article_5",
                            Id = 8,
                            ProductId = 5
                        },
                        new
                        {
                            Name = "article_6",
                            Id = 9,
                            ProductId = 6
                        },
                        new
                        {
                            Name = "article_7",
                            Id = 10,
                            ProductId = 7
                        },
                        new
                        {
                            Name = "article_8",
                            Id = 11,
                            ProductId = 8
                        },
                        new
                        {
                            Name = "article_9",
                            Id = 12,
                            ProductId = 9
                        },
                        new
                        {
                            Name = "article_10",
                            Id = 13,
                            ProductId = 10
                        },
                        new
                        {
                            Name = "article_11",
                            Id = 14,
                            ProductId = 11
                        },
                        new
                        {
                            Name = "article_12",
                            Id = 15,
                            ProductId = 12
                        },
                        new
                        {
                            Name = "article_13",
                            Id = 16,
                            ProductId = 13
                        },
                        new
                        {
                            Name = "article_14",
                            Id = 17,
                            ProductId = 14
                        },
                        new
                        {
                            Name = "article_15",
                            Id = 18,
                            ProductId = 15
                        },
                        new
                        {
                            Name = "article_16",
                            Id = 19,
                            ProductId = 16
                        },
                        new
                        {
                            Name = "article_17",
                            Id = 20,
                            ProductId = 17
                        },
                        new
                        {
                            Name = "article_18",
                            Id = 21,
                            ProductId = 18
                        },
                        new
                        {
                            Name = "article_19",
                            Id = 22,
                            ProductId = 19
                        },
                        new
                        {
                            Name = "article_20",
                            Id = 23,
                            ProductId = 20
                        },
                        new
                        {
                            Name = "article_21",
                            Id = 24,
                            ProductId = 21
                        },
                        new
                        {
                            Name = "article_22",
                            Id = 25,
                            ProductId = 22
                        },
                        new
                        {
                            Name = "article_23",
                            Id = 26,
                            ProductId = 23
                        },
                        new
                        {
                            Name = "article_24",
                            Id = 27,
                            ProductId = 24
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.Barcode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("ProductId");

                    b.ToTable("barcodes");

                    b.HasData(
                        new
                        {
                            Code = "barcode_1",
                            Id = 1,
                            ProductId = 1,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_2",
                            Id = 2,
                            ProductId = 2,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_3",
                            Id = 3,
                            ProductId = 3,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_4",
                            Id = 4,
                            ProductId = 4,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_5",
                            Id = 5,
                            ProductId = 5,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_6",
                            Id = 6,
                            ProductId = 6,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_7",
                            Id = 7,
                            ProductId = 7,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_7.1",
                            Id = 8,
                            ProductId = 7,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_8",
                            Id = 9,
                            ProductId = 8,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_9",
                            Id = 10,
                            ProductId = 9,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_10",
                            Id = 11,
                            ProductId = 10,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_11",
                            Id = 12,
                            ProductId = 11,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_12",
                            Id = 13,
                            ProductId = 12,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_13",
                            Id = 14,
                            ProductId = 13,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_14",
                            Id = 15,
                            ProductId = 14,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_15",
                            Id = 16,
                            ProductId = 15,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_16",
                            Id = 17,
                            ProductId = 16,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_17",
                            Id = 18,
                            ProductId = 17,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_18",
                            Id = 19,
                            ProductId = 18,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_19",
                            Id = 20,
                            ProductId = 19,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_20",
                            Id = 21,
                            ProductId = 20,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_21",
                            Id = 22,
                            ProductId = 21,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_22",
                            Id = 23,
                            ProductId = 22,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_23",
                            Id = 24,
                            ProductId = 23,
                            Type = 31
                        },
                        new
                        {
                            Code = "barcode_24",
                            Id = 25,
                            ProductId = 24,
                            Type = 31
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Одежда"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Дом"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Детям"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Красота"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Электроника"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Продукты"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Инструмент"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Электроинструмент",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 9,
                            Name = "Перфораторы",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 10,
                            Name = "Makita",
                            ParentId = 9
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("Cost")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProductInformationId")
                        .HasColumnType("int");

                    b.Property<int>("ProductInformationIp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductInformationId");

                    b.ToTable("prices");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("BuyPrice")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong?>("OldPrice")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("SalePrice")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyPrice = 200ul,
                            Name = "Пассатижи",
                            OldPrice = 560ul,
                            SalePrice = 450ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9068)
                        },
                        new
                        {
                            Id = 2,
                            BuyPrice = 1109ul,
                            Name = "Набор профессиональных отверток и бит DEKO SS100 с удобной подставкой (100 предметов)",
                            OldPrice = 2750ul,
                            SalePrice = 2409ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9070)
                        },
                        new
                        {
                            Id = 3,
                            BuyPrice = 1600ul,
                            Name = "Набор слесарного инстр-та в чем. 72пр. Волат (1/4\", 1/2\", 6 граней) (18530-72) (18530-72)",
                            OldPrice = 6700ul,
                            SalePrice = 4932ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9073)
                        },
                        new
                        {
                            Id = 4,
                            BuyPrice = 1600ul,
                            Name = "Дрель-шуруповерт с набором инструмента TOTAL THKTHP11282 (с 1-им АКБ, кейс, 128 предметов)",
                            OldPrice = 6700ul,
                            SalePrice = 4932ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9074)
                        },
                        new
                        {
                            Id = 5,
                            BuyPrice = 500ul,
                            Name = "Клещи (пресс-клещи) для обжима наконечников электропроводов с сечением 0.25-8 мм2 Gross",
                            OldPrice = 2200ul,
                            SalePrice = 1883ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9076)
                        },
                        new
                        {
                            Id = 6,
                            BuyPrice = 116268ul,
                            Name = "Смартфон Samsung Galaxy Z Fold6 12/256 ГБ, Dual: nano SIM + eSIM, серебристый",
                            OldPrice = 220268ul,
                            SalePrice = 176268ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9078)
                        },
                        new
                        {
                            Id = 7,
                            BuyPrice = 10400ul,
                            Name = "Перфоратор SDS+ 2.7Дж - 780Вт Makita HR2470",
                            OldPrice = 18900ul,
                            SalePrice = 16460ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9084)
                        },
                        new
                        {
                            Id = 8,
                            BuyPrice = 205ul,
                            Name = "Комбинированные плоскогубцы Gigant 180 мм GCP 180",
                            OldPrice = 590ul,
                            SalePrice = 480ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9086)
                        },
                        new
                        {
                            Id = 9,
                            BuyPrice = 320ul,
                            Name = "Диэлектрические пассатижи SHTOK 1000В 180 мм",
                            OldPrice = 730ul,
                            SalePrice = 650ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9091)
                        },
                        new
                        {
                            Id = 10,
                            BuyPrice = 130ul,
                            Name = "Мини пассатижи SHTOK 120 мм",
                            OldPrice = 420ul,
                            SalePrice = 350ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9099)
                        },
                        new
                        {
                            Id = 11,
                            BuyPrice = 460ul,
                            Name = "Никелированные пассатижи Inforce 200мм",
                            OldPrice = 910ul,
                            SalePrice = 900ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9100)
                        },
                        new
                        {
                            Id = 12,
                            BuyPrice = 1560ul,
                            Name = "Комплект насадок с ключом-трещоткой (26 предметов) Bosch",
                            OldPrice = 2050ul,
                            SalePrice = 2100ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9102)
                        },
                        new
                        {
                            Id = 13,
                            BuyPrice = 17200ul,
                            Name = "Набор торцевых головок SAE 3/4",
                            OldPrice = 25300ul,
                            SalePrice = 26500ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9104)
                        },
                        new
                        {
                            Id = 14,
                            BuyPrice = 3620ul,
                            Name = "Набор инструментов STARTUL 1/4 , 1/2 6 граней 108 предметов PRO Stuttgart PRO-108S",
                            OldPrice = 6200ul,
                            SalePrice = 6950ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9105)
                        },
                        new
                        {
                            Id = 15,
                            BuyPrice = 52900ul,
                            Name = "Набор трещоток 8100 SC 2 Zyklop 1/2 Wera WE-003645",
                            OldPrice = 72630ul,
                            SalePrice = 75550ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9107)
                        },
                        new
                        {
                            Id = 16,
                            BuyPrice = 16530ul,
                            Name = "Раскладной ящик с инструментами для механиков IZELTAS металлический, 63 предмета, 190х420х200",
                            OldPrice = 24200ul,
                            SalePrice = 25800ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9108)
                        },
                        new
                        {
                            Id = 17,
                            BuyPrice = 8630ul,
                            Name = "Перфоратор Ресанта П-32-1400КВ 75/3/6",
                            OldPrice = 10800ul,
                            SalePrice = 10700ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9110)
                        },
                        new
                        {
                            Id = 18,
                            BuyPrice = 12100ul,
                            Name = "Набор двенадцатигранных торцевых головок IZELTAS 24 предмета 1114006024",
                            OldPrice = 15650ul,
                            SalePrice = 16200ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9112)
                        },
                        new
                        {
                            Id = 19,
                            BuyPrice = 24500ul,
                            Name = "Бесщеточная дрель-шуруповерт Dewalt 18.0 В XR DCD7771D2",
                            OldPrice = 30120ul,
                            SalePrice = 29900ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9113)
                        },
                        new
                        {
                            Id = 20,
                            BuyPrice = 6350ul,
                            Name = "Аккумуляторная дрель-шуруповерт Makita DF333DWYE",
                            OldPrice = 10800ul,
                            SalePrice = 10900ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9115)
                        },
                        new
                        {
                            Id = 21,
                            BuyPrice = 17350ul,
                            Name = "Аккумуляторная дрель-шуруповерт Makita LXT DDF453RFE",
                            OldPrice = 21700ul,
                            SalePrice = 22490ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9116)
                        },
                        new
                        {
                            Id = 22,
                            BuyPrice = 3210ul,
                            Name = "Дрель Makita DF0300",
                            OldPrice = 6500ul,
                            SalePrice = 6490ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9118)
                        },
                        new
                        {
                            Id = 23,
                            BuyPrice = 11750ul,
                            Name = "Аккумуляторная бесщеточная ударная дрель-шуруповерт Bosch GSB 12V-30 06019G9120",
                            OldPrice = 16240ul,
                            SalePrice = 17240ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9120)
                        },
                        new
                        {
                            Id = 24,
                            BuyPrice = 17640ul,
                            Name = "Перфоратор Makita HR 2810",
                            OldPrice = 28750ul,
                            SalePrice = 29990ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9121)
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.ProductInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("NameToPrint")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("Weight")
                        .HasColumnType("double");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("product_informations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9190),
                            Description = "Пассатижи эконом класса",
                            Height = 25,
                            Length = 50,
                            NameToPrint = "Пассатижи",
                            ProductId = 1,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9191),
                            Weight = 0.10000000000000001,
                            Width = 150
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9193),
                            Description = "Набор профессиональных отверток и бит DEKO SS100 с удобной подставкой (100 предметов).",
                            Height = 315,
                            Length = 143,
                            NameToPrint = "Набор проф. отверток DEKO SS100",
                            ProductId = 2,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9194),
                            Weight = 2.75,
                            Width = 275
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9196),
                            Description = "Набор инструментов 1/4\", 1/2\" 6 граней 72 предмета волат (18530-72) - многофункциональный набор предназначен для ремонта и обслуживания автомобиля, а также для выполнения других слесарных работ. Рабочие части изготовлены из инструментальной стали. Покрытие сатинированное. Профиль головок шестигранный. Кейс из прочного противоударного пластика, с металлическими замками.",
                            Height = 300,
                            Length = 70,
                            NameToPrint = "Набор слесарного инстр-та 72пр.",
                            ProductId = 3,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9196),
                            Weight = 7.3799999999999999,
                            Width = 300
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9198),
                            Description = "Комплектация набора подобрана так, что домашний мастер закроет все бытовые вопросы, связанные с ремонтом и благоустройством, сборкой/разборкой мебели, монтажа/демонтажа",
                            Height = 300,
                            Length = 70,
                            NameToPrint = "Дрель-шуруповерт (с 1-им АКБ, кейс, 128 предметов)",
                            ProductId = 4,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9199),
                            Weight = 1.3,
                            Width = 300
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9200),
                            Description = "Пресс-клещи Gross 17724 используются для обжима наконечников электропроводов с сечением 0,25-8 м2. Позволяют добиться качественного соединения проводов при подключении бытовых приборов и электрооборудования. Клещи с автозажимом значительно повышают скорость работы, пригодятся в быту и профессиональной сфере. Преимущества 6-ступенчатая регулировка усилия сжатия позволяет выбрать оптимальный режим для работы с различными проводами. Двухкомпонентные рельефные рукоятки повышают удобство работы, обеспечивая надежный хват без риска проскальзывания инструмента. За счет функции авторазжима не нужно прикладывать усилия для раскрытия рабочих частей. Клещи упакованы в слайд карту для практичного хранения и транспортировк",
                            Height = 180,
                            Length = 3,
                            NameToPrint = "Клещи Gross",
                            ProductId = 5,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9201),
                            Weight = 0.29999999999999999,
                            Width = 100
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9203),
                            Description = "Сверхлегкий, тонкий дизайн\r\nТоньше и легче, идеально ложится в карман, и с еще более ярким раскрывающимся экраном, от которого захватывает дух.\r\nСамый простой способ составить сводку в заметках на складных Galaxy\r\nЗаметки со встреч и лекций всего в несколько касаний, даже в условиях многозадачности. Ассистент для заметок превращает записи в текст и организует их в заметки, создавая удобные сводки. Для всего остального пользуйтесь электронным пером пером S Pen, которое на большом экране способно творить чудеса.",
                            Height = 135,
                            Length = 10,
                            NameToPrint = "Смартфон Samsung Galaxy Z Fold6 12/256 ГБ, Dual: nano SIM + eSIM, серебристый",
                            ProductId = 6,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9204),
                            Weight = 0.17999999999999999,
                            Width = 150
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9206),
                            Description = "Три режима работы (сверление, сверление с ударом, долбление). Расцепляющая муфта для защиты инструмента и оператора при заклинивании. 40 осевых положений зубила для удобства эксплуатации. Спусковая кнопка с переменной скоростью.",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Перфоратор Makita HR2470",
                            ProductId = 7,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9206),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9208),
                            Description = "Комбинированные плоскогубцы Gigant 180 мм GCP 180",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Комб. плоскогубцы Gigant 180 мм",
                            ProductId = 8,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9208),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9210),
                            Description = "Диэлектрические пассатижи SHTOK 1000В 180 мм",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Диэлект. пассатижи SHTOK 1000В 180 мм",
                            ProductId = 9,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9210),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9212),
                            Description = "Мини пассатижи SHTOK 120 мм",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Мини пассатижи SHTOK 120 мм",
                            ProductId = 10,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9212),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9218),
                            Description = "Никелированные пассатижи Inforce 200мм",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Никелиров. пассатижи Inforce 200мм",
                            ProductId = 11,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9218),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9220),
                            Description = "Комплект насадок с ключом-трещоткой (26 предметов) Bosch",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Комп. насадок с кл.трещоткой Bosch",
                            ProductId = 12,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9220),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9222),
                            Description = "Набор торцевых головок SAE 3/4",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Набор торц. головок SAE 3/4",
                            ProductId = 13,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9223),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9224),
                            Description = "Набор инструментов STARTUL 1/4 , 1/2 6 граней 108 предметов PRO Stuttgart PRO-108S",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Наб. инстр. STARTUL 108 пред.",
                            ProductId = 14,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9225),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9226),
                            Description = "Набор трещоток 8100 SC 2 Zyklop 1/2 Wera WE-003645",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Наб. трещоток Zyklop",
                            ProductId = 15,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9227),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9229),
                            Description = "Раскладной ящик с инструментами для механиков IZELTAS металлический, 63 предмета, 190х420х200",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Раскл. ящик с инстр. IZELTAS метал.",
                            ProductId = 16,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9229),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9231),
                            Description = "Перфоратор Ресанта П-32-1400КВ 75/3/6",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Перфоратор Ресанта П-32",
                            ProductId = 17,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9231),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9233),
                            Description = "Набор двенадцатигранных торцевых головок IZELTAS 24 предмета 1114006024",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Наб. головок IZELTAS",
                            ProductId = 18,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9233),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9235),
                            Description = "Бесщеточная дрель-шуруповерт Dewalt 18.0 В XR DCD7771D2",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Бесщет. дрель-шуруповерт Dewalt",
                            ProductId = 19,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9235),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9238),
                            Description = "Аккумуляторная дрель-шуруповерт Makita DF333DWYE",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Аккум. дрель-шуруповерт Makita DF333DWYE",
                            ProductId = 20,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9238),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9240),
                            Description = "Аккумуляторная дрель-шуруповерт Makita LXT DDF453RFE",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Аккум. дрель-шуруповерт Makita LXT DDF453RFE",
                            ProductId = 21,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9240),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9242),
                            Description = "Дрель Makita DF0300",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Дрель Makita DF0300",
                            ProductId = 22,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9242),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9244),
                            Description = "Аккумуляторная бесщеточная ударная дрель-шуруповерт Bosch GSB 12V-30 06019G9120",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Аккум. бесщет. ударная дрель-шуруповерт Bosch",
                            ProductId = 23,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9244),
                            Weight = 2.8999999999999999,
                            Width = 84
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9246),
                            Description = "Перфоратор Makita HR 2810",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Перфоратор Makita HR 2810",
                            ProductId = 24,
                            UpdatedAt = new DateTime(2024, 8, 22, 20, 4, 22, 678, DateTimeKind.Local).AddTicks(9247),
                            Weight = 2.8999999999999999,
                            Width = 84
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.ProductToCategoryJoinTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId", "CategoryId")
                        .IsUnique();

                    b.ToTable("product_to_category_join_tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 7,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 7,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 7,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 7,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 7,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 7,
                            ProductId = 7
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Шт."
                        },
                        new
                        {
                            Id = 2,
                            Name = "Кг."
                        },
                        new
                        {
                            Id = 3,
                            Name = "М."
                        });
                });

            modelBuilder.Entity("KTSF.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "",
                            Email = "tester@mail.ru",
                            EmailConfirmed = false,
                            Name = "tester",
                            PasswordHash = "$2a$11$fDnrWaI/aPl8oIic6Pq4ZuSUNI1AkSJLjPa4gbPmkfjj6/pvtKKdS",
                            Patronymic = "testerovich",
                            PhoneNumber = "+7111111111",
                            PhoneNumberConfirmed = false,
                            Surname = "testerov"
                        });
                });

            modelBuilder.Entity("KTSF.Core.ABAC.ComponentAccessAttribute", b =>
                {
                    b.HasOne("KTSF.Core.ABAC.ASetOfRules", "ASetOfRules")
                        .WithMany("ComponentAccessAttributes")
                        .HasForeignKey("ASetOfRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ASetOfRules");
                });

            modelBuilder.Entity("KTSF.Core.ABAC.DataBaseAccessAttribute", b =>
                {
                    b.HasOne("KTSF.Core.ABAC.ASetOfRules", "ASetOfRules")
                        .WithMany("AccessAttributes")
                        .HasForeignKey("ASetOfRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("ASetOfRules");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KTSF.Core.ABAC.EmployeeAction", b =>
                {
                    b.HasOne("KTSF.Core.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KTSF.Core.Company", b =>
                {
                    b.HasOne("KTSF.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KTSF.Core.Employee", b =>
                {
                    b.HasOne("KTSF.Core.ABAC.ASetOfRules", "ASetOfRules")
                        .WithMany()
                        .HasForeignKey("ASetOfRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.EmployeeStatus", "EmployeeStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.Object", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ASetOfRules");

                    b.Navigation("Appointment");

                    b.Navigation("EmployeeStatus");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("KTSF.Core.Object", b =>
                {
                    b.HasOne("KTSF.Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("KTSF.Core.PackingList_.PackingList", b =>
                {
                    b.HasOne("KTSF.Core.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KTSF.Core.PackingList_.PackingListToProductJoinTable", b =>
                {
                    b.HasOne("KTSF.Core.PackingList_.PackingList", "PackingList")
                        .WithMany("PackingListToProductJoinTables")
                        .HasForeignKey("PackingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.Product_.Product", "Product")
                        .WithMany("PackingListToProductJoinTables")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackingList");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Article", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Product", "Product")
                        .WithMany("Articles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Barcode", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Product", "Product")
                        .WithMany("Barcodes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Category", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Price", b =>
                {
                    b.HasOne("KTSF.Core.Product_.ProductInformation", "ProductInformation")
                        .WithMany("PriceHistory")
                        .HasForeignKey("ProductInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInformation");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Product", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("KTSF.Core.Product_.ProductInformation", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Product", "Product")
                        .WithOne("ProductInformation")
                        .HasForeignKey("KTSF.Core.Product_.ProductInformation", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KTSF.Core.Product_.ProductToCategoryJoinTable", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Category", "Category")
                        .WithMany("ProductToCategoryJoinTables")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.Product_.Product", "Product")
                        .WithMany("ProductToCategoryJoinTables")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KTSF.Core.ABAC.ASetOfRules", b =>
                {
                    b.Navigation("AccessAttributes");

                    b.Navigation("ComponentAccessAttributes");
                });

            modelBuilder.Entity("KTSF.Core.PackingList_.PackingList", b =>
                {
                    b.Navigation("PackingListToProductJoinTables");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Category", b =>
                {
                    b.Navigation("ProductToCategoryJoinTables");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Product", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Barcodes");

                    b.Navigation("PackingListToProductJoinTables");

                    b.Navigation("ProductInformation");

                    b.Navigation("ProductToCategoryJoinTables");
                });

            modelBuilder.Entity("KTSF.Core.Product_.ProductInformation", b =>
                {
                    b.Navigation("PriceHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
