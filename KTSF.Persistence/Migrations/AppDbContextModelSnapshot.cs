// <auto-generated />
using System;
using KTSF.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KTSF.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("KTSF.Core.ABAC.ASetOfRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("a_set_of_rules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Старший кассир"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Менеджер по закупкам"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Кассир"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Установленные дополнительные права доступа на изменение цены для товаров",
                            Name = "Кассир Евгений"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Бухгалтер"
                        });
                });

            modelBuilder.Entity("KTSF.Core.ABAC.ComponentAccessAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ASetOfRulesId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ASetOfRulesId");

                    b.ToTable("component_access_attributes");
                });

            modelBuilder.Entity("KTSF.Core.ABAC.DataBaseAccessAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ASetOfRulesId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdminsConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("RangeFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RangeTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ASetOfRulesId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("database_access_attributes");
                });

            modelBuilder.Entity("KTSF.Core.ABAC.EmployeeAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AdminsСonsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Agent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OldData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_actions");
                });

            modelBuilder.Entity("KTSF.Core.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Менеджер по закупкам"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Старший кассир"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Кассир"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Бугалтер"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Охранник"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "Уборщик"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name = "Водитель"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Name = "Грущик"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            Name = "Слесарь"
                        });
                });

            modelBuilder.Entity("KTSF.Core.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "My company name",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("KTSF.Core.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ASetOfRulesId")
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ApplyingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LayoffDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("PassportSeries")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Snils")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tin")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ASetOfRulesId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("EmployeeStatusId");

                    b.HasIndex("ObjectId");

                    b.ToTable("employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ASetOfRulesId = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEifQ.GQm1j57RyZMHdwsolLnzhoB9A49mC0KusQBpHS9_-kQ",
                            Address = "Красная прощать 4",
                            ApplyingDate = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9471),
                            AppointmentId = 1,
                            Created_At = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9483),
                            Email = "admin@mail.ru",
                            EmployeeStatusId = 1,
                            Name = "Иван",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Алексеевич",
                            Phone = "+79260128187",
                            Snils = "123456789012",
                            Surname = "Калмыков",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9484)
                        },
                        new
                        {
                            Id = 2,
                            ASetOfRulesId = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjIifQ.cbpuaPB0oVEkmkgFvfQUcaRb58xRn5zlClDroWd75JA",
                            Address = "Арбатская 6",
                            ApplyingDate = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9487),
                            AppointmentId = 1,
                            Created_At = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9487),
                            Email = "admin2@mail.ru",
                            EmployeeStatusId = 1,
                            Name = "Артур",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Игоревич",
                            Phone = "+79260125434",
                            Snils = "123456789012",
                            Surname = "Соколов",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9487)
                        },
                        new
                        {
                            Id = 3,
                            ASetOfRulesId = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjMifQ.n0AxopvGMqJUdvyuXVuBZOurMD2Tiah-EqFi-a-lR6E",
                            Address = "Шевченко 4",
                            ApplyingDate = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9491),
                            AppointmentId = 1,
                            Created_At = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9491),
                            Email = "admin3@mail.ru",
                            EmployeeStatusId = 1,
                            Name = "Александр",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Владимирович",
                            Phone = "+79267654356",
                            Snils = "123456789012",
                            Surname = "Трунин",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9491)
                        },
                        new
                        {
                            Id = 4,
                            ASetOfRulesId = 4,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjQifQ.NiQnkH09RTP1QMiS9rbWLQ3iDJbZ2CV3RsBflk5QjXs",
                            Address = "Ново Павловка 16/3",
                            ApplyingDate = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9494),
                            AppointmentId = 1,
                            Created_At = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9494),
                            Email = "admin4@mail.ru",
                            EmployeeStatusId = 1,
                            Name = "Алексей",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Александрович",
                            Phone = "+79266455553",
                            Snils = "123456789012",
                            Surname = "Федосов",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9495)
                        },
                        new
                        {
                            Id = 5,
                            ASetOfRulesId = 5,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjUifQ.t9QlQfK-k6WS2yA2KlKgn0JRCQhDaz5Ujo8UBVTJWCM",
                            Address = "Дальний восток 13/3",
                            ApplyingDate = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9497),
                            AppointmentId = 1,
                            Created_At = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9497),
                            Email = "admin5@mail.ru",
                            EmployeeStatusId = 1,
                            Name = "Ансар",
                            ObjectId = 1,
                            PassportNumber = "123456",
                            PassportSeries = "1234",
                            Password = "tester",
                            Patronymic = "Нуруллович",
                            Phone = "+79266726545",
                            Snils = "123456789012",
                            Surname = "Агадуллин",
                            Tin = "12345678901",
                            Updated_At = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9498)
                        });
                });

            modelBuilder.Entity("KTSF.Core.EmployeeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("employee_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Не трудоустроен"
                        },
                        new
                        {
                            Id = 2,
                            Name = "На испытательном сроке"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Трудоустроен"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Уволен"
                        });
                });

            modelBuilder.Entity("KTSF.Core.Object", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("objects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ул. Новый Арбат, 15",
                            CompanyId = 1,
                            Name = "Продуктовый на Арбате"
                        });
                });

            modelBuilder.Entity("KTSF.Core.PackingList_.PackingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("packing_lists");
                });

            modelBuilder.Entity("KTSF.Core.PackingList_.PackingListToProductJoinTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("PackingListId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackingListId");

                    b.HasIndex("ProductId", "PackingListId")
                        .IsUnique();

                    b.ToTable("packing_list_to_product_joint_tables");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Article", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("ProductId");

                    b.ToTable("articles");

                    b.HasData(
                        new
                        {
                            Name = "article_1",
                            Id = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Name = "article_2",
                            Id = 2,
                            ProductId = 2
                        },
                        new
                        {
                            Name = "article_2.1",
                            Id = 3,
                            ProductId = 2
                        },
                        new
                        {
                            Name = "article_3",
                            Id = 4,
                            ProductId = 3
                        },
                        new
                        {
                            Name = "article_4",
                            Id = 5,
                            ProductId = 4
                        },
                        new
                        {
                            Name = "article_4.1",
                            Id = 6,
                            ProductId = 4
                        },
                        new
                        {
                            Name = "article_4.2",
                            Id = 7,
                            ProductId = 4
                        },
                        new
                        {
                            Name = "article_5",
                            Id = 8,
                            ProductId = 5
                        },
                        new
                        {
                            Name = "article_6",
                            Id = 9,
                            ProductId = 6
                        },
                        new
                        {
                            Name = "article_7",
                            Id = 10,
                            ProductId = 7
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.Barcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("barcodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "barcode_1",
                            ProductId = 1,
                            Type = 31
                        },
                        new
                        {
                            Id = 2,
                            Code = "barcode_2",
                            ProductId = 2,
                            Type = 31
                        },
                        new
                        {
                            Id = 3,
                            Code = "barcode_3",
                            ProductId = 3,
                            Type = 31
                        },
                        new
                        {
                            Id = 4,
                            Code = "barcode_4",
                            ProductId = 4,
                            Type = 31
                        },
                        new
                        {
                            Id = 5,
                            Code = "barcode_5",
                            ProductId = 5,
                            Type = 31
                        },
                        new
                        {
                            Id = 6,
                            Code = "barcode_6",
                            ProductId = 6,
                            Type = 31
                        },
                        new
                        {
                            Id = 7,
                            Code = "barcode_7",
                            ProductId = 7,
                            Type = 31
                        },
                        new
                        {
                            Id = 8,
                            Code = "barcode_7.1",
                            ProductId = 7,
                            Type = 31
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Одежда"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Дом"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Детям"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Красота"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Электроника"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Продукты"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Инструмент"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Электроинструмент",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 9,
                            Name = "Перфораторы",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 10,
                            Name = "Makita",
                            ParentId = 9
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("Cost")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ProductInformationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductInformationId");

                    b.ToTable("prices");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("BuyPrice")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("BuySales")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong?>("OldPrice")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyPrice = 200ul,
                            BuySales = 450ul,
                            Name = "Пассатижи",
                            OldPrice = 560ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9605)
                        },
                        new
                        {
                            Id = 2,
                            BuyPrice = 1109ul,
                            BuySales = 2409ul,
                            Name = "Набор профессиональных отверток и бит DEKO SS100 с удобной подставкой (100 предметов)",
                            OldPrice = 2750ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9609)
                        },
                        new
                        {
                            Id = 3,
                            BuyPrice = 1600ul,
                            BuySales = 4932ul,
                            Name = "Набор слесарного инстр-та в чем. 72пр. Волат (1/4\", 1/2\", 6 граней) (18530-72) (18530-72)",
                            OldPrice = 6700ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9611)
                        },
                        new
                        {
                            Id = 4,
                            BuyPrice = 1600ul,
                            BuySales = 4932ul,
                            Name = "Дрель-шуруповерт с набором инструмента TOTAL THKTHP11282 (с 1-им АКБ, кейс, 128 предметов)",
                            OldPrice = 6700ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9613)
                        },
                        new
                        {
                            Id = 5,
                            BuyPrice = 500ul,
                            BuySales = 1883ul,
                            Name = "Клещи (пресс-клещи) для обжима наконечников электропроводов с сечением 0.25-8 мм2 Gross",
                            OldPrice = 2200ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9615)
                        },
                        new
                        {
                            Id = 6,
                            BuyPrice = 116268ul,
                            BuySales = 176268ul,
                            Name = "Смартфон Samsung Galaxy Z Fold6 12/256 ГБ, Dual: nano SIM + eSIM, серебристый",
                            OldPrice = 220268ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9617)
                        },
                        new
                        {
                            Id = 7,
                            BuyPrice = 10400ul,
                            BuySales = 16460ul,
                            Name = "Перфоратор SDS+ 2.7Дж - 780Вт Makita HR2470",
                            OldPrice = 18900ul,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9619)
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.ProductInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("NameToPrint")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("Weight")
                        .HasColumnType("double");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("product_informations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9656),
                            Description = "Пассатижи эконом класса",
                            Height = 25,
                            Length = 50,
                            NameToPrint = "Пассатижи",
                            ProductId = 1,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9656),
                            Weight = 0.10000000000000001,
                            Width = 150
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9659),
                            Description = "Набор профессиональных отверток и бит DEKO SS100 с удобной подставкой (100 предметов).",
                            Height = 315,
                            Length = 143,
                            NameToPrint = "Набор проф. отверток DEKO SS100",
                            ProductId = 2,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9660),
                            Weight = 2.75,
                            Width = 275
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9662),
                            Description = "Набор инструментов 1/4\", 1/2\" 6 граней 72 предмета волат (18530-72) - многофункциональный набор предназначен для ремонта и обслуживания автомобиля, а также для выполнения других слесарных работ. Рабочие части изготовлены из инструментальной стали. Покрытие сатинированное. Профиль головок шестигранный. Кейс из прочного противоударного пластика, с металлическими замками.",
                            Height = 300,
                            Length = 70,
                            NameToPrint = "Набор слесарного инстр-та 72пр.",
                            ProductId = 3,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9662),
                            Weight = 7.3799999999999999,
                            Width = 300
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9668),
                            Description = "Комплектация набора подобрана так, что домашний мастер закроет все бытовые вопросы, связанные с ремонтом и благоустройством, сборкой/разборкой мебели, монтажа/демонтажа",
                            Height = 300,
                            Length = 70,
                            NameToPrint = "Дрель-шуруповерт (с 1-им АКБ, кейс, 128 предметов)",
                            ProductId = 4,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9668),
                            Weight = 1.3,
                            Width = 300
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9670),
                            Description = "Пресс-клещи Gross 17724 используются для обжима наконечников электропроводов с сечением 0,25-8 м2. Позволяют добиться качественного соединения проводов при подключении бытовых приборов и электрооборудования. Клещи с автозажимом значительно повышают скорость работы, пригодятся в быту и профессиональной сфере. Преимущества 6-ступенчатая регулировка усилия сжатия позволяет выбрать оптимальный режим для работы с различными проводами. Двухкомпонентные рельефные рукоятки повышают удобство работы, обеспечивая надежный хват без риска проскальзывания инструмента. За счет функции авторазжима не нужно прикладывать усилия для раскрытия рабочих частей. Клещи упакованы в слайд карту для практичного хранения и транспортировк",
                            Height = 180,
                            Length = 3,
                            NameToPrint = "Клещи Gross",
                            ProductId = 5,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9670),
                            Weight = 0.29999999999999999,
                            Width = 100
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9672),
                            Description = "Сверхлегкий, тонкий дизайн\r\nТоньше и легче, идеально ложится в карман, и с еще более ярким раскрывающимся экраном, от которого захватывает дух.\r\nСамый простой способ составить сводку в заметках на складных Galaxy\r\nЗаметки со встреч и лекций всего в несколько касаний, даже в условиях многозадачности. Ассистент для заметок превращает записи в текст и организует их в заметки, создавая удобные сводки. Для всего остального пользуйтесь электронным пером пером S Pen, которое на большом экране способно творить чудеса.",
                            Height = 135,
                            Length = 10,
                            NameToPrint = "Смартфон Samsung Galaxy Z Fold6 12/256 ГБ, Dual: nano SIM + eSIM, серебристый",
                            ProductId = 6,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9672),
                            Weight = 0.17999999999999999,
                            Width = 150
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9674),
                            Description = "Три режима работы (сверление, сверление с ударом, долбление). Расцепляющая муфта для защиты инструмента и оператора при заклинивании. 40 осевых положений зубила для удобства эксплуатации. Спусковая кнопка с переменной скоростью.",
                            Height = 214,
                            Length = 370,
                            NameToPrint = "Перфоратор Makita HR2470",
                            ProductId = 7,
                            UpdatedAt = new DateTime(2024, 8, 1, 17, 6, 54, 802, DateTimeKind.Local).AddTicks(9675),
                            Weight = 2.8999999999999999,
                            Width = 84
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.ProductToCategoryJoinTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId", "CategoryId")
                        .IsUnique();

                    b.ToTable("product_to_category_join_tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 7,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 7,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 7,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 7,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 7,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 7,
                            ProductId = 7
                        });
                });

            modelBuilder.Entity("KTSF.Core.Product_.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Шт."
                        },
                        new
                        {
                            Id = 2,
                            Name = "Кг."
                        },
                        new
                        {
                            Id = 3,
                            Name = "М."
                        });
                });

            modelBuilder.Entity("KTSF.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "bgUYGBvkuybjkyGJGVjhyvbjyuBKYJ",
                            Email = "tester@mail.ru",
                            Name = "tester",
                            PasswordHash = "tester",
                            Patronymic = "testerovich",
                            Phone = "+7111111111",
                            Surname = "testerov"
                        });
                });

            modelBuilder.Entity("KTSF.Core.ABAC.ComponentAccessAttribute", b =>
                {
                    b.HasOne("KTSF.Core.ABAC.ASetOfRules", "ASetOfRules")
                        .WithMany("ComponentAccessAttributes")
                        .HasForeignKey("ASetOfRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ASetOfRules");
                });

            modelBuilder.Entity("KTSF.Core.ABAC.DataBaseAccessAttribute", b =>
                {
                    b.HasOne("KTSF.Core.ABAC.ASetOfRules", "ASetOfRules")
                        .WithMany("AccessAttributes")
                        .HasForeignKey("ASetOfRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("ASetOfRules");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KTSF.Core.ABAC.EmployeeAction", b =>
                {
                    b.HasOne("KTSF.Core.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KTSF.Core.Company", b =>
                {
                    b.HasOne("KTSF.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KTSF.Core.Employee", b =>
                {
                    b.HasOne("KTSF.Core.ABAC.ASetOfRules", "ASetOfRules")
                        .WithMany()
                        .HasForeignKey("ASetOfRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.EmployeeStatus", "EmployeeStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.Object", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ASetOfRules");

                    b.Navigation("Appointment");

                    b.Navigation("EmployeeStatus");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("KTSF.Core.Object", b =>
                {
                    b.HasOne("KTSF.Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("KTSF.Core.PackingList_.PackingList", b =>
                {
                    b.HasOne("KTSF.Core.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KTSF.Core.PackingList_.PackingListToProductJoinTable", b =>
                {
                    b.HasOne("KTSF.Core.PackingList_.PackingList", "PackingList")
                        .WithMany("PackingListToProductJoinTables")
                        .HasForeignKey("PackingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.Product_.Product", "Product")
                        .WithMany("PackingListToProductJoinTables")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackingList");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Article", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Product", "Product")
                        .WithMany("Articles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Barcode", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Product", "Product")
                        .WithMany("Barcodes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Category", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Price", b =>
                {
                    b.HasOne("KTSF.Core.Product_.ProductInformation", null)
                        .WithMany("PriceHistory")
                        .HasForeignKey("ProductInformationId");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Product", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("KTSF.Core.Product_.ProductInformation", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Product", "Product")
                        .WithOne("ProductInformation")
                        .HasForeignKey("KTSF.Core.Product_.ProductInformation", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KTSF.Core.Product_.ProductToCategoryJoinTable", b =>
                {
                    b.HasOne("KTSF.Core.Product_.Category", "Category")
                        .WithMany("ProductToCategoryJoinTables")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTSF.Core.Product_.Product", "Product")
                        .WithMany("ProductToCategoryJoinTables")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KTSF.Core.ABAC.ASetOfRules", b =>
                {
                    b.Navigation("AccessAttributes");

                    b.Navigation("ComponentAccessAttributes");
                });

            modelBuilder.Entity("KTSF.Core.PackingList_.PackingList", b =>
                {
                    b.Navigation("PackingListToProductJoinTables");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Category", b =>
                {
                    b.Navigation("ProductToCategoryJoinTables");
                });

            modelBuilder.Entity("KTSF.Core.Product_.Product", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Barcodes");

                    b.Navigation("PackingListToProductJoinTables");

                    b.Navigation("ProductInformation");

                    b.Navigation("ProductToCategoryJoinTables");
                });

            modelBuilder.Entity("KTSF.Core.Product_.ProductInformation", b =>
                {
                    b.Navigation("PriceHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
